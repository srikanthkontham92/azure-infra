name: CD Workflow

on:
  workflow_dispatch:
    inputs:
      run_all:
        description: 'Run All Stages'
        required: true
        default: 'false'
        type: choice
        options:
          - 'true'
          - 'false'
      run_terraform:
        description: 'Run Terraform Stage'
        required: true
        default: 'false'
        type: choice
        options:
          - 'true'
          - 'false'
      terraform_action:
        description: 'Terraform Action to Run (plan, apply, destroy)'
        required: true
        default: 'plan'
        type: choice
        options:
          - 'plan'
          - 'apply'
          - 'destroy'
      environment:
        description: 'Environment (dev or qa)'
        required: true
        default: 'dev'
        type: choice
        options:
          - 'dev'
          - 'qa'
      run_docker_image:
        description: 'Run Docker Image Stage'
        required: true
        default: 'false'
        type: choice
        options:
          - 'true'
          - 'false'
      run_kustomize:
        description: 'Run Kustomize Stage'
        required: true
        default: 'false'
        type: choice
        options:
          - 'true'
          - 'false'

jobs:
  terraform:
    runs-on: ubuntu-latest
    if: ${{ github.event.inputs.run_all == 'true' || github.event.inputs.run_terraform == 'true' }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v2

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v1

      - name: Initialize Terraform
        run: terraform init -backend-config="path=${{ github.event.inputs.environment }}/terraform.tfstate"

      - name: Terraform Plan
        if: ${{ github.event.inputs.terraform_action == 'plan' }}
        run: terraform plan -var-file="${{ github.event.inputs.environment }}.tfvars"

      - name: Terraform Apply
        if: ${{ github.event.inputs.terraform_action == 'apply' }}
        run: terraform apply -auto-approve -var-file="${{ github.event.inputs.environment }}.tfvars"

      - name: Terraform Destroy
        if: ${{ github.event.inputs.terraform_action == 'destroy' }}
        run: terraform destroy -auto-approve -var-file="${{ github.event.inputs.environment }}.tfvars"

  docker_image:
    runs-on: ubuntu-latest
    if: ${{ github.event.inputs.run_all == 'true' || github.event.inputs.run_docker_image == 'true' }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v2

      - name: Login to DockerHub
        uses: docker/login-action@v2
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      - name: Build Docker Image
        run: docker build -t my-app:latest .

      - name: Push Docker Image
        run: docker push my-app:latest

  kustomize:
    runs-on: ubuntu-latest
    if: ${{ github.event.inputs.run_all == 'true' || github.event.inputs.run_kustomize == 'true' }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v2

      - name: Install Kustomize
        run: |
          curl -s https://api.github.com/repos/kubernetes-sigs/kustomize/releases/latest \
          | grep browser_download_url \
          | grep linux_amd64 \
          | cut -d '"' -f 4 \
          | xargs curl -LO
          mv kustomize_v*_linux_amd64 kustomize
          chmod +x kustomize
          sudo mv kustomize /usr/local/bin/

      - name: Apply Kustomize
        run: kustomize build ./k8s | kubectl apply -f -
